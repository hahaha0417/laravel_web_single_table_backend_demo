因為web應用強調最小載入(因為速度快)
因此我的hahahalib不應該強求每個子專案，一定都要有
如果有極端特殊需求，也可以用原生php，直接做出功能

我的包有相依一些php extesion，但是我有autoloader產生器(不檢查ext相依)
因此在使用我的工具下，我不需要處理php extesion相依問題

如要最小化載入，特殊request，可能composer的autoloader也要禁用，這要獨立細部處理(這有實際遇到時再來做小工具)

 ------------------------------------------------ 
專案
 ------------------------------------------------ 
因為各專案各自獨立，因此我強調彈性，沒必要統一各專案版本，因為專案大時，同步維護成本太大(就算都是我的框架，我也不一定都要是相同版本)
因此，如果在我框架下，才一定會有hahahalib，其他除非預先談好要整併到我框架下
不強求要照我的命名規則，或者是我的一套，頂多我特別要的地方我會要求

因為這個架構是我個人直接要用的(我套版可能git下來後，就直接開發了)，我有另外的目的要順便維護hahhalib(就是挖尬一的東西放進去我的hahahalib，或者順便維護hahahalib)
所以預設專案裡面都會有hahahalib(注意可能版本不一，因為我只是簡單複製)
如有配合專案，可以自己下載其他框架(跟我搭配原則上只用laravel，因為其他框架我不會用)
原則上我只提供laravel環境初始化包(我沒事幹嘛替所有框架提供設定集，何況我不會用那些框架)

 ------------------------------------------------ 
laravel
 ------------------------------------------------ 
app\libraies
請依照PSR-4命名

 ------------------------------------------------ 
php hahaha framework
 ------------------------------------------------ 
整個專案原則上都用class mapping
只有要整進我框架或libraries的強迫用class mapping
其他可以用其他命名模式

但是我主導的主要的少數案子，除非是他類libraries或套件，我會要求都用class mapping
並且遵守我的命名規則(不會非常強制，但是我review時看到的會要求修正)

 
 ------------------------------------------------ 
命名規則
 ------------------------------------------------ 
基本上各專案不強制要求全部要採相同命名(因為目前主要是laravel為主，何況可能分工會外包)

因為我有個人框架，因此我在規劃通用項時，會以我框架命名為主，(如果我框架成功，未來會將laravel換成我的框架，所以通用包，則以我框架命名為主，這樣我維護才有一致性)

至於會冠上hahaha，因為通用模組規劃不易(誰敢確保自己寫的模組絕對強健並且夠common，為了避免最終的位置被強佔或者發生爭吵，因此我都將我的東西放在我規劃的namesapce下(我有一系列命名方法，不是唯一))