 -------------------------------------- 
架構 
 -------------------------------------- 
核心目前為單表式後台 & 前台套版

hahaha - laravel主專案，並引入hahahalib
project\hahaha - php hahaha framework
project\front - laravel前台專案，並引入hahahalib
project\backend - laravel後台專案，並引入hahahalib
project\api - laravel api專案，並引入hahahalib

project可以多專案結合
利用reverse proxy組合，或者有錢用多域名

 -------------------------------------- 
目錄規劃
 -------------------------------------- 
基本上可以全部專案寫在同一個專案
但是為了不要重刻後台，所以後台獨立出來比較好，到時候要是後台改版，比較好更新

目錄規劃依據專案擺放同步擺放，例如public底下
這些是link
public/hahaha
public/project/hahaha
public/project/front
public/project/backend
public/project/api

因為是虛節點，程式內連結則從虛節點開始規劃
 -------------------------------------- 
核心邏輯
 -------------------------------------- 
統一單表式後台
客製化前台
客製化API
如沒有版權問題，則可以考慮使用php hahaha framework
php hahaha framework使用必先確認客戶意願，避免他要賣給黨國或金融
要賣還要另外花很多時間移回去laravel

這裡規劃主專案是laravel
php hahaha framework是台灣阿牛(輔助腳色，可有可無)

 -------------------------------------- 
Migrate 問題
 -------------------------------------- 
因為版本維護會有更新問題(例如migrate我可能擴充架構，多一個表，會導致我新的表在使用我架構的人的表後面)，因此除非客製化的表，跟架構有關的不放在migrate
大概分類為，如果跟系統有關的(可以直接reset的)，則用command建，客製化的，則用migrate管理
migrate不限制怎樣管理，但是如果我的專案，原則上migrate採，基本表，然後附加表，附加太多次時，則收編成單一表


 -------------------------------------- 
發展模式
 -------------------------------------- 
發展模式為階段式，一個階段推一個階段，要跳轉階段時，則該跳轉版本，必須為穩地stable，也就是github基本上新建專案重新開發也行
至於要不要Open Source各階段的Code，由規畫者決定(誰決定的部分請他負責)，基本上，各階段我會開Code，但是專案賣錢的，則根據實際營運模式決定(有些人賺不到錢，不能強迫，有些人3cm裝好人，不敢開Code)
意思是有營利的，我主要的大型專案不一定會開Code，但是一般的小案子，那表可能就是簡單模式(單表 X 附加表 X 相依表 X N)，其實藏那個沒有很大意義，基本上就是法律 & 政治離不清的，則請自己參考打一份，如果沒有法律 & 政治問題，則就直接用


 -------------------------------------- 
願景
 -------------------------------------- 

如未來php hahaha framework確定可以營運
則我的專案規劃會以php hahaha framework為主
並將專案直接建置在php hahaha framework


laravel原則上在我管理下不移植到lumen，因為我實際移植過
官網說快3倍，實際上移植完，會因為套件相依需要，實際上只快不到一倍

可能的話，如我開公司，我的專案我會移植至我的php hahaha framework

