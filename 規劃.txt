 -------------------------------------- 
架構 
 -------------------------------------- 
核心目前為單表式後台 & 前台套版

hahaha - laravel主專案，並引入hahahalib
project\hahaha - php hahaha framework
project\front - laravel前台專案，並引入hahahalib
project\backend - laravel後台專案，並引入hahahalib
project\api - laravel api專案，並引入hahahalib

project可以多專案結合
利用reverse proxy組合，或者有錢用多域名

 -------------------------------------- 
目錄規劃
 -------------------------------------- 
基本上可以全部專案寫在同一個專案
但是為了不要重刻後台，所以後台獨立出來比較好，到時候要是後台改版，比較好更新

目錄規劃依據專案擺放同步擺放，例如public底下
這些是link
public/hahaha
public/project/hahaha
public/project/front
public/project/backend
public/project/api

因為是虛節點，程式內連結則從虛節點開始規劃
 -------------------------------------- 
核心邏輯
 -------------------------------------- 
統一單表式後台
客製化前台
客製化API
如沒有版權問題，則可以考慮使用php hahaha framework
php hahaha framework使用必先確認客戶意願，避免他要賣給黨國或金融
要賣還要另外花很多時間移回去laravel

這裡規劃主專案是laravel
php hahaha framework是台灣阿牛(輔助腳色，可有可無)

 -------------------------------------- 
Migrate 問題
 -------------------------------------- 
因為版本維護會有更新問題(例如migrate我可能擴充架構，多一個表，會導致我新的表在使用我架構的人的表後面)，因此除非客製化的表，跟架構有關的不放在migrate
大概分類為，如果跟系統有關的(可以直接reset的)，則用command建，客製化的，則用migrate管理
migrate不限制怎樣管理，但是如果我的專案，原則上migrate採，基本表，然後附加表，附加太多次時，則收編成單一表


 -------------------------------------- 
發展模式
 -------------------------------------- 
發展模式為階段式，一個階段推一個階段，要跳轉階段時，則該跳轉版本，必須為穩地stable，也就是github基本上新建專案重新開發也行
至於要不要Open Source各階段的Code，由規畫者決定(誰決定的部分請他負責)，基本上，各階段我會開Code，但是專案賣錢的，則根據實際營運模式決定(有些人賺不到錢，不能強迫，有些人3cm裝好人，不敢開Code)
意思是有營利的，我主要的大型專案不一定會開Code，但是一般的小案子，那表可能就是簡單模式(單表 X 附加表 X 相依表 X N)，其實藏那個沒有很大意義，基本上就是法律 & 政治離不清的，則請自己參考打一份，如果沒有法律 & 政治問題，則就直接用

 -------------------------------------- 
命名問題
 -------------------------------------- 
因為是公用設定，public命名可能應該放在更大更細的地方(其實public是保留字，所以要用也是public_)，而且其實通用的東西，命名應該簡化，所以取名pub
h這種命名方式，應該放在最大的地方，提供最便捷的服務，沒事不要歸類在這種單字母的namespace下

快捷入口則放在短namespace下，因為h & ha & A_A & mm在我架構下，這是我預設的命名方式，因此根據pub，要取更短的名稱
因為快捷項目會有各種命名方法，因此管理上介於個人(要負責，則掛名) & 大家用(夠common)，兩者都要，所以我採用縮寫p_ha(pub ha)
所以會變成這樣\p_ha::asset(組合2~4字已經夠短了(關鍵字 + 識別項)，6個字就違反我的命名規則了(快捷我要比較短)，我一般都取hahaha，如要六個字，我隨便找個命名都可以，只要跟大家講好就好 

 -------------------------------------- 
通用php檔問題
 --------------------------------------
因為這種建置方法，以裡面子專案為主(以人為本)，也就是裡面子專案，
基本上拆出去也應該要可以直接跑(只要root的framework & libraries...相關檔案順便帶走)
因此意思是要同步所有framework & libraries，必須由規畫者，統一那些東西composer.json大家要一起引入，
引入太多，會導致class_map太肥，導致效能不彰，請不要亂規劃

基本上，因為我的php hahha framework設計的夠快(hahaha framework) & 夠彈性(hahahalib)，因此要是我的專案，
我的root的framework可能會要求所有專案要加入我的hahahalib & framework，並繼承出直接建制root架構
但是基本上要是各種框架都有，基本上會牽扯到一些開發特性(例如某些專案是做API，要很快)，
那時，要是不同專案特性發生衝突，基本上就將需要的模組，複製出來，換個namesapce繼承使用

這樣架構做法請確保法律及政治問題，如果無法解決，還是自己刻一個通用模組，不然就不要在root導入
私有的東西，私有的東西請跟隨子專案存亡(人)，在root公用的東西，不一定要做很大，所以其實做一些小模組來用也是可以的

例如API，可以另外開一個獨立專案，走額外一套系統掛上來，公用的請用複製的方式同步

 -------------------------------------- 
資源檔(js & css)
 -------------------------------------- 
要用線上 or 抓到本地皆可，請自行決定
我主要的套件(jquery & bootstrap)是直接抓線上的，因為我認為他不會消失
其他的因為有版本維護問題，所以我抓到本地
如擔心線上CDN消失，則請自己抓到本地
https://cdnjs.com/

 -------------------------------------- 
快捷接口規劃
 -------------------------------------- 
之前是因為怕求職不順利，所以我套版設計的接口盡量做的跟Laravel很像
因為我php hahaha framework出來了，確定還蠻快的，所以我所有規劃就採用我C++決定的相同設計方法
(因為laravel這整套最後設計，會轉到php hahaha framework，如果我有做出C++版本，則還會轉到C++版本)

 -------------------------------------- 
方針
 -------------------------------------- 
Laravel - 無法處理的政治 & 錢的問題，則統一推薦Laravel - 半相容該框架要求 or 完全照框架要求
php hahaha framework - 政治OK，用來攻擊市場(公司缺錢(殺價) & 公司有錢(市價)) - 我開公司會用自己的框架 - 以我框架要求為準，我有規劃二段式作法
hahaha framework(尚無) - 政治完全OK才授權，這如果有的話，我會要求指標做法 & 嚴謹作法 & 賣高單價，經營模式跟PHP不會相同
(因為指標問題不好處理)

 -------------------------------------- 
資料庫相關
 -------------------------------------- 
因為laravel ORM很慢，有效率需求的地方都不用
migrate用laravel的scheme

seeder用laravel or doctrine應該都行(只要laravel不是用ORM)，
DB::table('accounts')->insert一次多筆是OK的，他只是query builder
https://www.youtube.com/watch?v=3TJfR1Ta4GU

一般專案query則統一用doctrine的，"laravel的query builder只放行到seeder & migration"
其他地方限制用doctrine，避免看起來很奇怪

極致要求效能的強制用MySQLi or PDO
一般場景放行到Doctrine2

其實一般來說會進行Cache，doctrine可以設result cache，一般情況會比較方便
性能高要求的，有空我再做模組，看是不是可以對MySQLi or PDO進行Cache or 更方便使用

 -------------------------------------- 
reference議題
 -------------------------------------- 
因為做完目標是移值到php hahaha framework
因為我的框架很快
因此可以減少記憶體複製就減少，
所以return 我只是用來回傳狀態，如要接資料用refence
public function findByFields(&$result, &$setting_table,
	&$fields = ['*'], 
	$offset = null, 
	$limit = null
) 
{
	return true;
	// return [$a, &$b];
}
return [true, &$result]這樣也可，但是基本上，上面那樣寫是最快，最方便，這裡這樣寫使用還要$result[1]
而且我不確定是否會reference成功，這要測試看看才可以決定是否可以用
這好像要這樣接
[$a, &$b] = findByFields();，要寫兩次reference
沒確定前，禁止使用這樣reference，沒寫兩個reference似乎沒寫的地方還是用copy的

 -------------------------------------- 
效能議題
 -------------------------------------- 
我的框架只贏laravel在純memory + 本機的情況
因此當導入快取，會出現明顯差距

DB操作，只有在要求很快的情況下要換成
MySQLi or PDO
一般情況下，還是放行doctrine，但少用PHPDoc相關的function如get classmeta

 -------------------------------------- 
doctrine PHPDoc議題
 -------------------------------------- 
例如
$class_meta_ = EntityManager::getClassMetadata($setting_table['entity']);
$table_name_ = $class_meta_->getTableName();

這似乎會parser entity php檔案，會慢10ms
在我的php hahaha framework裡面太慢

因此決定我的框架內禁用，用填表法代替
ex. single table backend web
hahaha_setting_table.php

 -------------------------------------- 
後台Table編輯問題
 -------------------------------------- 
因為目前頁面全部參數化，只要預先寫好，可以加入多種按鈕(例如新增按鈕可以多種方式，但只呈現設定的那些按鈕)
因為設計可以任意組合，而我只選一種新增(Lite新增)和編輯(彈出全部編輯視窗，因為我要複製內容用)樣式
基本上就是做好自己組合，但是如果只是我個人維護，非我選擇維護的，頁面壞掉我不管

附加的頁面基本上用外掛包導入，因此我預設專案裡面是沒有的，我只做指引和簡易說明
意思是主專案是按照我的意念最簡化實作一個版本，而其他需求，則採外掛的方式，因此要是版本移植或其他，
則請去找外掛的人，基本上專案外的我都做切割

 -------------------------------------- 
呆帳處理問題
 -------------------------------------- 
如果有金融人士要亂，基本上政客會跟他們配合
(目前狀況是，政客會故意搞狀況，強迫相關人士"低價"替他們處理，不處理會故意搞人，使相關人士沒飯吃)
因此假設政客不維持公平，則優先處理該政客及相關金融

 -------------------------------------- 
管理原則
 -------------------------------------- 
金融(包含相關組織)最後，黨國(包含相關組織)禁用，民間(民生)優先
明講是指現在FED & 中國，惡劣的搞人團體

 -------------------------------------- 
套版CSS & JS撰寫
 -------------------------------------- 
這是單表式套板後台網站，因此很多都參數化，而參數化後PHP && CSS && JS是無法直接知道有那些ID對應特定的EVENT的
因此除了寫在PHP文件裡面，沒有其他辦法動態對應CSS & JS
但是寫在Page的request的頁面會造成傳輸太肥，而且會重複處理相同的CSS & JS，因此折中的方法，用PHP直接產生對應需要的CSS & JS

因為我每頁的會附一個CSS & JS，他根據我view 1-1擺放，因此，假設我有修改，我更新對應的CSS & JS即可，往後就直接下載對應的CSS & JS即可
而又有CDN等類似緩存檔案在節點技術，因此此法是OK的

而為什麼我不用視窗程式來做這個，因為我還要花時間去解析PHP的所有文件(包括define & view & controller)，小小處理不需要這麼麻煩，這也不需要每次處理
因此等到我有做到c++ web framework時，如果有類似問題就是C++ Windows Solution

結論 : 
因為我有php hahaha framework，因此我就用原生PHP的方式產生CSS & JS，就不使用Laravel Blade的方式來做，避免我移植到我的php hahaha framework還要寫一次這個

 -------------------------------------- 
願景
 -------------------------------------- 

如未來php hahaha framework確定可以營運
則我的專案規劃會以php hahaha framework為主
並將專案直接建置在php hahaha framework


laravel原則上在我管理下不移植到lumen，因為我實際移植過
官網說快3倍，實際上移植完，會因為套件相依需要，實際上只快不到一倍

可能的話，如我開公司，我的專案我會移植至我的php hahaha framework
